/*
 * This Groovy source file was generated by the Gradle 'init' task.
 */
package mm1

import groovy.text.SimpleTemplateEngine
import mm1.model.Configuration
import mm1.model.EventGenerator
import mm1.model.EventList
import mm1.model.EventType
import mm1.model.Statistics
import mm1.simulator.Simulator
import org.codehaus.groovy.util.StringUtil

class App {
    static String getGreeting() {
        return 'MM1 simulator starting...'
    }

    Properties readProperties(String fileName) {
        Properties properties = new Properties()
        getClass().getResource(fileName).withInputStream {
            properties.load(it)
        }

        properties.each { println String.format("%-10s -> %-10s", it.key, it.value) }

        return properties
    }

    static void main(String[] args) {
        println greeting

        Properties properties = new App().readProperties('/user-input.properties')
        Configuration config = new Configuration(properties)

        // debug purpose
        Boolean debug = false
        if(debug) {
            config.numOfSimulations = 1
        }

        Statistics statistics = new Statistics()
        // run multiple simulations
        for(int i = 0; i < config.numOfSimulations; i++) {
            EventGenerator generator = new EventGenerator(config)
            EventList eventList = new EventList()
            generator.generate(eventList)

            println(eventList.eventList.size().toString() + "/" +
                    eventList.eventList.findAll {it.type == EventType.MESSAGE}.size().toString())

            Simulator simulation = new Simulator(config)
            simulation.simulate(eventList)
            statistics.addStatistics(simulation)

            generateHTMLReport(config, simulation.system, i)

            // change seed
            config.seed++
        }
        //TODO: warm up time
        //TODO: events generating new events?
        //TODO: set poisson expected value from range (for example uniform distri between 0.5-6
        // and poisson distribution with lambda
        //TODO: print plots
    }

    static void generateHTMLReport(Configuration configuration, mm1.model.System system, int simulationNumber) {
        def templateText = getClass().getResource(configuration.templateName).getText()
        def engine = new SimpleTemplateEngine().createTemplate(templateText)
        def template = engine.make(["title": "Report $simulationNumber", "data": system])
        File file = new File(configuration.outputDir + File.separator + sprintf(configuration.reportName, simulationNumber))
        file.getParentFile().mkdirs()
        file.write(template.toString())
    }
}
